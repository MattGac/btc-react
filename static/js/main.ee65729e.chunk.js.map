{"version":3,"sources":["components/CryptoList.js","components/Crypto.js","App.js","serviceWorker.js","index.js"],"names":["CryptoList","props","cryptoColection","cryptoList","map","elem","key","currency","className","colorClass","last","symbol","Crypto","getData","axios","get","then","res","cryptoData","data","cryptoArray","i","prevCryptoValue","state","crypto","classValue","undefined","console","log","cryptoObject","push","setState","filteredCrypto","filterCrypto","event","filteredCryptoData","filter","cryptoElement","toUpperCase","includes","filterInput","value","this","timer","setInterval","type","onChange","ref","input","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4TAuBeA,EAnBI,SAACC,GAEhB,IAAIC,EAAkBD,EAAME,WAAWC,KAAI,SAAAC,GAE3C,OAAO,wBAAIC,IAAKD,EAAKE,SACrBC,UAAU,eADH,cAC4B,0BAAMA,UACxCH,EAAKI,YAAaJ,EAAKK,MAAaL,EAAKE,SACzCF,EAAKM,WAKN,OACI,yBAAKH,UAAU,QACVN,ICmEEU,E,YA5EX,aAAe,IAAD,8BACV,+CAYJC,QAAU,WACNC,IAAMC,IAAN,qCACKC,MAAK,SAAAC,GACF,IAAMC,EAAaD,EAAIE,KACnBC,EAAc,GACdC,EAAI,EAER,IAAK,IAAIf,KAAOY,EAAY,CACxB,IAAII,EAAkB,EAAKC,MAAMC,OAAOH,GACpCI,OAAU,OACUC,IAApBJ,GACAK,QAAQC,IAAIN,EAAgBZ,MACxBY,EAAgBZ,KAAOQ,EAAWZ,GAAKI,KACvCe,EAAa,MACNH,EAAgBZ,KAAOQ,EAAWZ,GAAKI,OAC9Ce,EAAa,UAEjBA,EAAa,OAGjB,IAAII,EAAe,CACfnB,KAAMQ,EAAWZ,GAAKI,KACtBC,OAAQO,EAAWZ,GAAKK,OACxBJ,SAAUD,EACVG,WAAYgB,GAGhBL,EAAYU,KAAKD,GACjBR,IAEJ,EAAKU,SAAS,CACVP,OAAQJ,EACRY,eAAeZ,IAEnB,EAAKa,mBA/CH,EAoDdA,aAAe,SAACC,GACZ,IAAIC,EAAqB,EAAKZ,MAAMC,OAAOY,QAAO,SAAAC,GAC9C,OAAOA,EAAc9B,SAAS+B,cAAcC,SAAS,EAAKC,YAAYC,MAAMH,kBAEhF,EAAKP,SAAS,CAAEC,eAAgBG,KAtDhC,EAAKZ,MAAQ,CACTC,OAAQ,GACRQ,eAAgB,IAJV,E,iFASVU,KAAK7B,UACL6B,KAAKC,MAAQC,YAAYF,KAAK7B,QAAS,O,+BAoDjC,IAAD,OACL,OACI,yBAAKL,UAAU,UACX,2CACA,2BAAOqC,KAAK,OAAOC,SAAUJ,KAAKT,aAAcc,IAAK,SAAAC,GAAK,OAAI,EAAKR,YAAcQ,KACjF,kBAAC,EAAD,CAAY7C,WAAYuC,KAAKnB,MAAMS,sB,GArE9BiB,aCMNC,MARf,WACE,OACE,yBAAK1C,UAAU,OACb,kBAAC,EAAD,QCIc2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,MAAK,SAAA+C,GACjCA,EAAaC,kB","file":"static/js/main.ee65729e.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nconst CryptoList = (props) => {\n\n    let cryptoColection = props.cryptoList.map(elem => {\n\n    return <li key={elem.currency} \n    className='crypto-item'>Last rate: <span className=\n    {elem.colorClass}>{elem.last}</span>{elem.currency}\n    {elem.symbol}</li>\n                 \n    })\n\n\n    return (\n        <div className='list'>\n            {cryptoColection}\n        </div>\n    )\n}\n\nexport default CryptoList","import React, { Component } from 'react';\n\nimport axios from 'axios';\n\nimport CryptoList from './CryptoList'\n\n\nclass Crypto extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            crypto: [],\n            filteredCrypto: []\n        }\n    }\n\n    componentDidMount() {\n        this.getData()\n        this.timer = setInterval(this.getData, 5000)\n    }\n\n    getData = () => {\n        axios.get(`https://blockchain.info/pl/ticker`)\n            .then(res => {\n                const cryptoData = res.data;\n                let cryptoArray = [];\n                let i = 0;\n\n                for (let key in cryptoData) {\n                    let prevCryptoValue = this.state.crypto[i];\n                    let classValue;\n                    if (prevCryptoValue !== undefined) {\n                        console.log(prevCryptoValue.last)\n                        if (prevCryptoValue.last > cryptoData[key].last) {\n                            classValue = 'red';\n                        } else if (prevCryptoValue.last < cryptoData[key].last)\n                            classValue = 'green';\n                    } else {\n                        classValue = 'blue';\n                    }\n\n                    let cryptoObject = {\n                        last: cryptoData[key].last,\n                        symbol: cryptoData[key].symbol,\n                        currency: key,\n                        colorClass: classValue\n                    }\n\n                    cryptoArray.push(cryptoObject)\n                    i++\n                }\n                this.setState({\n                    crypto: cryptoArray,\n                    filteredCrypto:cryptoArray\n                });\n                this.filterCrypto();\n\n            });\n    }\n\n    filterCrypto = (event) => {\n        let filteredCryptoData = this.state.crypto.filter(cryptoElement => {\n            return cryptoElement.currency.toUpperCase().includes(this.filterInput.value.toUpperCase())\n        })\n        this.setState({ filteredCrypto: filteredCryptoData })\n    }\n\n\n\n\n    render() {\n        return (\n            <div className='crypto' >\n                <h2>Crypto rate</h2>\n                <input type='text' onChange={this.filterCrypto} ref={input => this.filterInput = input} />\n                <CryptoList cryptoList={this.state.filteredCrypto} />\n            </div>\n        )\n    }\n}\n\n\n\n\nexport default Crypto","import React from 'react';\n\nimport './App.css';\nimport Crypto from './components/Crypto'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Crypto />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}